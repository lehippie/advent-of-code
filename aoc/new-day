#!/usr/bin/env python

"""Create a new puzzle.

Usage:
    new-day <year> <day>
    new-day
    new-day --help

Arguments:
    <year>, <day>   Date of the new day.

Options:
    -h, --help      Show this help.
"""

import re
from datetime import datetime
from urllib.request import Request, urlopen
from docopt import docopt
from aoc import ROOT, CONFIG


TEMPLATE = '''"""%s."""

from aoc.puzzle import Puzzle


class Puzzle%s(Puzzle):
    def parser(self):
        return self.input

    def part_one(self):
        return super().part_one()

    def part_two(self):
        return super().part_two()


if __name__ == "__main__":
    Puzzle%s(solutions=(None, None)).solve()
'''


def create_file(year, day):
    day = f"{day:>02}"
    puzzle_path = ROOT / str(year) / f"{day}.py"
    if puzzle_path.exists():
        raise IOError("Puzzle file already exists.")
    puzzle_path.parent.mkdir(parents=True, exist_ok=True)
    puzzle_path.write_text(TEMPLATE % (day_title(year, day), day, day))


def day_title(year, day):
    request = Request(
        url=f"https://adventofcode.com/{year}/day/{int(day)}",
        headers={"cookie": f"session={CONFIG['www']['session']}"},
    )
    with urlopen(request) as response:
        response = response.read().decode("utf-8")
        return re.findall(r"--- (Day.*) ---", response)[0]


if __name__ == "__main__":
    args = docopt(__doc__)
    if args["<year>"] is None:
        args["<year>"] = datetime.now().year
        args["<day>"] = datetime.now().day
    create_file(args["<year>"], args["<day>"])
